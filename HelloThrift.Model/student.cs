/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class student : TBase
{

  public string StudentName { get; set; }

  public string Sex { get; set; }

  public long Age { get; set; }

  public student() {
  }

  public student(string studentName, string sex, long age) : this() {
    this.StudentName = studentName;
    this.Sex = sex;
    this.Age = age;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_studentName = false;
      bool isset_sex = false;
      bool isset_age = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              StudentName = iprot.ReadString();
              isset_studentName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Sex = iprot.ReadString();
              isset_sex = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Age = iprot.ReadI64();
              isset_age = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_studentName)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StudentName not set");
      if (!isset_sex)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Sex not set");
      if (!isset_age)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Age not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("student");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StudentName == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field StudentName not set");
      field.Name = "studentName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(StudentName);
      oprot.WriteFieldEnd();
      if (Sex == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Sex not set");
      field.Name = "sex";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Sex);
      oprot.WriteFieldEnd();
      field.Name = "age";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Age);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("student(");
    __sb.Append(", StudentName: ");
    __sb.Append(StudentName);
    __sb.Append(", Sex: ");
    __sb.Append(Sex);
    __sb.Append(", Age: ");
    __sb.Append(Age);
    __sb.Append(")");
    return __sb.ToString();
  }

}

