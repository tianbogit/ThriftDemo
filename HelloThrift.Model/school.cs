/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class school : TBase
{

  public string SchoolName { get; set; }

  public long Age { get; set; }

  public List<string> Zhuanye { get; set; }

  public List<banji> AllBanji { get; set; }

  public school() {
  }

  public school(string schoolName, long age, List<string> zhuanye, List<banji> allBanji) : this() {
    this.SchoolName = schoolName;
    this.Age = age;
    this.Zhuanye = zhuanye;
    this.AllBanji = allBanji;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_schoolName = false;
      bool isset_age = false;
      bool isset_zhuanye = false;
      bool isset_allBanji = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SchoolName = iprot.ReadString();
              isset_schoolName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Age = iprot.ReadI64();
              isset_age = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Zhuanye = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Zhuanye.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
              isset_zhuanye = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                AllBanji = new List<banji>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  banji _elem5;
                  _elem5 = new banji();
                  _elem5.Read(iprot);
                  AllBanji.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
              isset_allBanji = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_schoolName)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SchoolName not set");
      if (!isset_age)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Age not set");
      if (!isset_zhuanye)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Zhuanye not set");
      if (!isset_allBanji)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AllBanji not set");
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("school");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SchoolName == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SchoolName not set");
      field.Name = "schoolName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SchoolName);
      oprot.WriteFieldEnd();
      field.Name = "age";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(Age);
      oprot.WriteFieldEnd();
      if (Zhuanye == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Zhuanye not set");
      field.Name = "zhuanye";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.String, Zhuanye.Count));
        foreach (string _iter6 in Zhuanye)
        {
          oprot.WriteString(_iter6);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (AllBanji == null)
        throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AllBanji not set");
      field.Name = "allBanji";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, AllBanji.Count));
        foreach (banji _iter7 in AllBanji)
        {
          _iter7.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("school(");
    __sb.Append(", SchoolName: ");
    __sb.Append(SchoolName);
    __sb.Append(", Age: ");
    __sb.Append(Age);
    __sb.Append(", Zhuanye: ");
    __sb.Append(Zhuanye);
    __sb.Append(", AllBanji: ");
    __sb.Append(AllBanji);
    __sb.Append(")");
    return __sb.ToString();
  }

}

